name: Build OpenWrt Firmware (ZyXEL EX5601-T0)

on:
  workflow_dispatch:
    inputs:
      # Allow selecting the OpenWrt branch (main=snapshot, openwrt-24.10=release branch, etc.)
      openwrt_branch:
        description: 'OpenWrt branch/tag to build from'
        required: true
        default: 'main' # Build snapshot by default
      # Usually keep this as is for the stock-layout OpenWrt build
      target_device_profile:
        description: 'Device Profile Suffix'
        required: true
        default: 'zyxel_ex5601-t0-stock'

permissions:
  contents: read

jobs:
  build:
    name: Build for ${{ github.event.inputs.target_device_profile }} from ${{ github.event.inputs.openwrt_branch }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout OpenWrt source code
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt # Use the official repo
          ref: ${{ github.event.inputs.openwrt_branch }} # Checkout the selected branch/tag

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools python3-venv python3-dev rsync unzip zlib1g-dev file wget

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # Set target and add requested packages
      - name: Set Target Config and Packages
        run: |
          echo "Setting build configuration for ${{ github.event.inputs.target_device_profile }}..."
          # --- Base Target Selection (mediatek/filogic) ---
          echo "CONFIG_TARGET_mediatek=y" > .config
          echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
          echo "CONFIG_TARGET_mediatek_filogic_DEVICE_${{ github.event.inputs.target_device_profile }}=y" >> .config

          echo "# --- User Requested Packages (ZyXEL EX5601) ---" >> .config
          # --- LuCI Base & Core Apps ---
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-ssl-openssl=y" >> .config # Using OpenSSL variant
          echo "CONFIG_PACKAGE_luci-app-opkg=y" >> .config # Package Manager UI
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          echo "CONFIG_DEFAULT_luci-app-firewall=y" >> .config # Firewall UI (Essential)

          # --- LuCI Themes ---
          echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config # Default theme
          echo "CONFIG_PACKAGE_luci-theme-openwrt-2020=y" >> .config # Alternative

          # --- Basic Utilities ---
          echo "CONFIG_PACKAGE_nano=y" >> .config
          echo "CONFIG_PACKAGE_htop=y" >> .config

          # --- SSH / SFTP ---
          echo "CONFIG_PACKAGE_openssh-sftp-server=y" >> .config # Adds SFTP to default Dropbear

          # --- QoS / SQM ---
          echo "CONFIG_PACKAGE_sqm-scripts=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-sqm=y" >> .config # LuCI for SQM

          # --- VPN (WireGuard) ---
          echo "CONFIG_PACKAGE_kmod-wireguard=y" >> .config # Kernel module
          echo "CONFIG_PACKAGE_wireguard-tools=y" >> .config # Userspace tools
          echo "CONFIG_PACKAGE_luci-app-wireguard=y" >> .config # LuCI for WireGuard

          # --- Guest Network ---
          echo "CONFIG_PACKAGE_luci-app-guest-wifi=y" >> .config # Optional helper UI

          # --- IoT / Device Discovery ---
          echo "CONFIG_PACKAGE_avahi-daemon=y" >> .config # mDNS/Bonjour daemon
          echo "CONFIG_PACKAGE_luci-app-avahi=y" >> .config # LuCI for Avahi

          # --- VoIP Support (Basic NAT Helpers - Full VoIP unsupported on device) ---
          echo "CONFIG_PACKAGE_kmod-nf-nathelper-extra=y" >> .config # Includes SIP ALG

          # --- USB Support ---
          echo "CONFIG_PACKAGE_kmod-usb-storage=y" >> .config # Base USB Storage support
          echo "CONFIG_PACKAGE_kmod-fs-ext4=y" >> .config     # Ext4 filesystem
          echo "CONFIG_PACKAGE_kmod-fs-vfat=y" >> .config     # FAT32 filesystem
          echo "CONFIG_PACKAGE_block-mount=y" >> .config      # For automounting
          # Note: USB drivers kmod-usb3, kmod-usb-xhci-hcd should be pulled in by target selection

          # --- Diagnostics / Monitoring ---
          echo "CONFIG_PACKAGE_tcpdump=y" >> .config
          echo "CONFIG_PACKAGE_iperf3=y" >> .config
          # Optional: Add luci-app-statistics + collectd if desired

          # --- UPnP ---
          echo "CONFIG_PACKAGE_luci-app-upnp=y" >> .config # LuCI for UPnP

          # --- Networking Offloading (Should be included by target, confirm if needed) ---
          # echo "CONFIG_PACKAGE_kmod-nft-offload=y" >> .config # Usually default for filogic

          echo "Configuration set."

      # Finalize configuration based on the .config file
      - name: Finalize configuration
        run: |
          make defconfig

      - name: Download toolchain and sources
        run: |
          make download -j$(nproc) V=s || make download -j1 V=s

      - name: Build firmware
        run: |
          # Use V=s for detailed output, adjust -j jobs if needed
          make -j$(nproc) V=s || make -j1 V=s

      # Optional debug step
      - name: List Build Output Files
        run: |
          echo "Listing contents of bin/targets/mediatek/filogic/"
          ls -lR bin/targets/mediatek/filogic/
        continue-on-error: true

      # Upload the final firmware images (factory and sysupgrade)
      - name: Upload Firmware Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ github.event.inputs.target_device_profile }}-${{ github.event.inputs.openwrt_branch }}
          # Catch both factory and sysupgrade .bin files for this device
          path: bin/targets/mediatek/filogic/openwrt-mediatek-filogic-${{ github.event.inputs.target_device_profile }}*.bin
          retention-days: 7
          if-no-files-found: warn # Don't fail if only one type exists
