name: Build OpenWrt Firmware (GL-B3000 from Fork+Upstream)

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: 'Target Device (usually glinet_gl-b3000)'
        required: false
        default: 'glinet_gl-b3000'
      upstream_branch:
        description: 'Upstream OpenWrt branch to merge'
        required: true
        default: 'main'

permissions:
  contents: read

jobs:
  build:
    name: Build firmware from Fork + Upstream/${{ github.event.inputs.upstream_branch || 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from fork
        uses: actions/checkout@v4
        with:
          # No repository or ref specified, checks out the repo/branch the workflow runs from
          # Fetch full depth to allow merging later
          fetch-depth: 0

      - name: Merge latest OpenWrt upstream branch
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          echo "Adding upstream remote..."
          git remote add upstream https://github.com/openwrt/openwrt.git
          echo "Fetching upstream ${{ github.event.inputs.upstream_branch }}..."
          git fetch upstream ${{ github.event.inputs.upstream_branch }}
          echo "Attempting merge..."
          git merge upstream/${{ github.event.inputs.upstream_branch }} --no-edit || echo "Merge conflict or already up-to-date."
          echo "Merge step complete."

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3-setuptools python3-venv python3-dev rsync unzip zlib1g-dev file wget

      - name: Disable Telephony Feed if it exists
        run: |
          echo "Attempting to disable telephony feed in feeds.conf.default..."
          # Use sed to comment out the line starting with 'src-git telephony'
          # -i modifies the file in place. Ignore error if the line isn't found.
          sed -i '/^src-git telephony/s/^/#/' feeds.conf.default || true
          echo "Current feeds.conf.default content:"
          cat feeds.conf.default

      # Run feeds update/install *after* the merge
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # Force target AND add required packages with their LuCI counterparts
      - name: Set Target Config and Packages
        run: |
          echo "Setting build configuration..."
          # --- Base Target Selection ---
          echo "CONFIG_TARGET_qualcommax=y" > .config
          echo "CONFIG_TARGET_qualcommax_ipq50xx=y" >> .config
          echo "CONFIG_TARGET_qualcommax_ipq50xx_DEVICE_glinet_gl-b3000=y" >> .config

          echo "# --- LuCI Base & Core Apps ---" >> .config
          echo "CONFIG_PACKAGE_luci=y" >> .config
          echo "CONFIG_PACKAGE_luci-ssl-openssl=y" >> .config # Using OpenSSL variant
          echo "CONFIG_PACKAGE_luci-app-opkg=y" >> .config # Package Manager UI
          echo "CONFIG_PACKAGE_luci-base=y" >> .config
          echo "CONFIG_DEFAULT_luci-app-firewall=y" >> .config # Firewall UI (Essential)

          echo "# --- LuCI Themes ---" >> .config
          echo "CONFIG_PACKAGE_luci-theme-bootstrap=y" >> .config # Default theme
          echo "CONFIG_PACKAGE_luci-theme-openwrt-2020=y" >> .config # Alternative

          echo "# --- Basic Utilities ---" >> .config
          echo "CONFIG_PACKAGE_nano=y" >> .config
          echo "CONFIG_PACKAGE_htop=y" >> .config

          echo "# --- SSH / SFTP ---" >> .config
          echo "CONFIG_PACKAGE_openssh-sftp-server=y" >> .config # Adds SFTP to default Dropbear

          echo "# --- QoS / SQM ---" >> .config
          echo "CONFIG_PACKAGE_sqm-scripts=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-sqm=y" >> .config # LuCI for SQM (REQUIRED)

          echo "# --- VPN (WireGuard) ---" >> .config
          echo "CONFIG_PACKAGE_kmod-wireguard=y" >> .config # Kernel module
          echo "CONFIG_PACKAGE_wireguard-tools=y" >> .config # Userspace tools
          echo "CONFIG_PACKAGE_luci-app-wireguard=y" >> .config # LuCI for WireGuard (REQUIRED)

          echo "# --- Guest Network ---" >> .config
          # Note: Guest network functionality relies heavily on Wifi drivers/config
          echo "CONFIG_PACKAGE_luci-app-guest-wifi=y" >> .config # Optional helper UI

          echo "# --- IoT / Device Discovery ---" >> .config
          echo "CONFIG_PACKAGE_avahi-daemon=y" >> .config # mDNS/Bonjour daemon
          echo "CONFIG_PACKAGE_luci-app-avahi=y" >> .config # LuCI for Avahi (Optional but useful)

          echo "# --- VoIP Support (Basic NAT Helpers) ---" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-nathelper-extra=y" >> .config # Includes SIP ALG (No specific LuCI app for ALG)

          echo "# --- NAS/RPi Interaction & USB ---" >> .config
          echo "CONFIG_PACKAGE_kmod-usb-storage=y" >> .config # Base USB Storage support
          echo "CONFIG_PACKAGE_kmod-fs-ext4=y" >> .config     # Ext4 filesystem
          echo "CONFIG_PACKAGE_kmod-fs-vfat=y" >> .config     # FAT32 filesystem
          echo "CONFIG_PACKAGE_block-mount=y" >> .config      # For automounting
          # No specific LuCI app for just mounting, usually handled by block-mount + basic LuCI mount points

          echo "# --- Diagnostics / Monitoring ---" >> .config
          echo "CONFIG_PACKAGE_tcpdump=y" >> .config
          echo "CONFIG_PACKAGE_iperf3=y" >> .config
          # Optional: echo "CONFIG_PACKAGE_luci-app-statistics=y" >> .config # LuCI stats (requires collectd below)
          # Optional: echo "CONFIG_PACKAGE_collectd=y" >> .config

          echo "# --- UPnP ---" >> .config
          echo "CONFIG_PACKAGE_luci-app-upnp=y" >> .config # LuCI for UPnP (REQUIRED if UPnP needed)

          echo "# --- Core Networking (Usually default, included for safety) ---" >> .config
          echo "CONFIG_PACKAGE_dnsmasq=y" >> .config
          echo "CONFIG_PACKAGE_firewall4=y" >> .config
          echo "CONFIG_PACKAGE_iptables-nft=y" >> .config
          echo "CONFIG_PACKAGE_odhcpd-ipv6only=y" >> .config # Or odhcp6c if only client needed

          echo "Configuration set."

      # Finalize configuration based on the .config file
      - name: Finalize configuration
        run: |
          make defconfig

      - name: Download toolchain and sources
        run: |
          make download -j$(nproc) V=s || make download -j1 V=s

      - name: Build firmware
        run: |
          # Use V=s for detailed output, adjust -j jobs if needed
          make -j$(nproc) V=s || make -j1 V=s

      # Optional debug step
      - name: List Build Output Files
        run: |
          echo "Listing contents of bin/targets/qualcommax/ipq50xx/"
          ls -lR bin/targets/qualcommax/ipq50xx/
        continue-on-error: true

      # Upload the final firmware images
      - name: Upload Firmware Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ github.event.inputs.target_device || 'glinet_gl-b3000' }}-fork-upstream
          # Include both .img and .itb files based on previous output
          path: |
            bin/targets/qualcommax/ipq50xx/openwrt-qualcommax-ipq50xx-glinet_gl-b3000-*
          retention-days: 14
          if-no-files-found: warn # Don't fail if only one type exists
